plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'maven-publish'
}

apply from: "${rootDir}/gradle/versioning.gradle"
apply from: "${rootDir}/gradle/license-header.gradle"
def distributionName = "ACC Race Control " + project.ext.versionString

application {
    mainClass = 'racecontrol.Main'
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "../changelog"
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.13.2'

    //compileOnly group: 'org.processing', name: 'core', version: '3.3.6'
    implementation 'org.processing:core:3.3.7'
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.17.0'
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.17.0'
    compileOnly group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.17.0'
    implementation 'com.google.apis:google-api-services-sheets:v4-rev20240319-2.0.0'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.35.0'
    implementation 'com.google.api-client:google-api-client:2.4.0'
}

run {
    dependsOn installDist
    workingDir new File(new File(buildDir, 'install'), distributionName)
    jvmArgs("-splash:data/loading.png")
}

distributions {
    main {
        distributionBaseName = distributionName
        contents {
            into("/Google Sheets API Key") {
                from "credentials"
            }
        }
    }
}

publishing {
    publications {
         mavenJava(MavenPublication) {
             pom {
                 groupId = 'org.leonard-schuengel'
                 artifactId = 'acc-race-control'
                 version = '1.0'
             }
        }
    }
}

tasks.register('copyLibs', Copy) {
    group = "Release"
    from configurations.runtimeClasspath
    from jar
    into "$projectDir/build/release/" + distributionName + "/lib"
    setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)
}
tasks.register('copyDist', Copy) {
    group = "Release"
    from "$projectDir/src/dist"
    into "$projectDir/build/release/" + distributionName
    setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

tasks.register('buildRelease', Zip) {
    group = "Release"
    dependsOn copyLibs
    dependsOn copyDist
    from "$projectDir/build/release/" + distributionName
    setArchiveBaseName(distributionName)
    setDestinationDirectory(file("$projectDir/build/release/"))
}


/*
compileJava {
    options.compilerArgs << '-Xlint:unchecked'
}
*/

processResources {
    setDuplicatesStrategy(DuplicatesStrategy.INCLUDE)
}


